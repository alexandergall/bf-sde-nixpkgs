diff -Naur bf-drivers-9.13.2.orig/kdrv/bf_kdrv/bf_kdrv.c bf-drivers-9.13.2/kdrv/bf_kdrv/bf_kdrv.c
--- bf-drivers-9.13.2.orig/kdrv/bf_kdrv/bf_kdrv.c	2024-02-07 14:54:47.000000000 +0100
+++ bf-drivers-9.13.2/kdrv/bf_kdrv/bf_kdrv.c	2024-02-22 14:11:00.155785322 +0100
@@ -191,6 +191,9 @@
 #if RHEL_RELEASE_CODE >= RHEL_RELEASE_VERSION(9,2)
 #define NEW_RHEL
 #endif
+#if RHEL_RELEASE_CODE == RHEL_RELEASE_VERSION(9,2)
+#define NEW_RHEL_9_2
+#endif
 #endif
 #if LINUX_VERSION_CODE < KERNEL_VERSION(5, 15, 0) && !defined(NEW_RHEL)
   u32 mask_bits = desc->masked;
@@ -207,7 +210,7 @@
 #else
   u32 mask_bits = desc->pci.msix_ctrl;
   u32 *desc_mask_bits = &desc->pci.msix_ctrl;
-#if defined(NEW_RHEL) && RHEL_RELEASE_CODE == RHEL_RELEASE_VERSION(9, 2)
+#if defined(NEW_RHEL_9_2)
   unsigned offset = desc->pci.msi_attrib.entry_nr * PCI_MSIX_ENTRY_SIZE +
 #else
   unsigned offset = desc->msi_index * PCI_MSIX_ENTRY_SIZE +
@@ -257,7 +260,9 @@
 #elif LINUX_VERSION_CODE < KERNEL_VERSION(5, 17, 0) && !defined(RHEL93)
     for_each_pci_msi_entry(desc, pdev) bf_msix_mask_irq(desc, irq_state);
 #else
+    msi_lock_descs(&pdev->dev);
     msi_for_each_desc(desc, &pdev->dev, MSI_DESC_ALL) bf_msix_mask_irq(desc, irq_state);
+    msi_unlock_descs(&pdev->dev);
 #endif
   }
   pci_cfg_access_unlock(pdev);
@@ -514,7 +519,7 @@
   if (minor >= BF_MAX_DEVICE_CNT) {
     return (-EINVAL);
   }
-  if (mode == 0 && &bf_global[minor].async_queue == NULL) {
+  if (mode == 0 && bf_global[minor].async_queue == NULL) {
     bf_global[minor].pending_signal = false;
     return 0; /* nothing to do */
   }
@@ -1323,6 +1328,7 @@
 #endif /* LINUX_VERSION_CODE */
     /* ** intentional no-break */
     /* FALLTHRU */
+      __attribute__ ((__fallthrough__));
     case BF_INTR_MODE_MSI:
 #if LINUX_VERSION_CODE < KERNEL_VERSION(3, 14, 0)
       num_irq = pci_enable_msi_block(pdev, BF_MSI_ENTRY_CNT);
@@ -1362,6 +1368,7 @@
     /* fall back to Legacy Interrupt, intentional no-break */
     /* FALLTHRU */
 
+      __attribute__ ((__fallthrough__));
     case BF_INTR_MODE_LEGACY:
       if (pci_intx_mask_supported(pdev)) {
         bfdev->info.irq_flags = IRQF_SHARED;
@@ -1373,6 +1380,7 @@
       printk(KERN_NOTICE " bf PCI INTx mask not supported\n");
     /* fall back to no Interrupt, intentional no-break */
     /* FALLTHRU */
+      __attribute__ ((__fallthrough__));
     case BF_INTR_MODE_NONE:
       bfdev->info.irq = 0;
       bfdev->info.num_irq = 0;
